@startuml
class shapes.PrintVisitor {
- int i
+ void visit(Circle)
+ void visit(Rectangle)
}


class shapes.DrawRectangle {
- State WaitForClick
- State Dragging
- Rectangle rect
- State state
~ void setState(State)
+ Rectangle getRectangle()
+ void mouseDown(Pos)
+ void mouseUp(Pos)
+ void mouseMove(Pos)
}


abstract class shapes.DrawRectangle$State {
~ {abstract}void mouseUp(Pos)
~ {abstract}void mouseDown(Pos)
~ {abstract}void mouseMove(Pos)
}

class shapes.Circle {
- int radius
- Pos center
+ <<Create>> Circle()
+ <<Create>> Circle(Pos,int)
+ int getRadius()
+ Pos getCenter()
+ void setRadius(int)
+ void setCenter(Pos)
+ void accept(Visitor)
}


class shapes.Rectangle {
- Pos a
- Pos b
+ <<Create>> Rectangle()
+ <<Create>> Rectangle(Pos,Pos)
+ Pos getA()
+ Pos getB()
+ void setA(Pos)
+ void setB(Pos)
+ void accept(Visitor)
}


interface shapes.Visitor {
~ void visit(Circle)
~ void visit(Rectangle)
}

interface shapes.Shape {
~ void accept(Visitor)
}

class shapes.Pos {
- int x
+ <<Create>> Pos()
+ <<Create>> Pos(int,int)
+ int getX()
+ int getY()
+ String toString()
+ int hashCode()
+ boolean equals(Object)
}




shapes.Visitor <|.. shapes.PrintVisitor
shapes.DrawRectangle +.. shapes.DrawRectangle$State
shapes.Shape <|.. shapes.Circle
shapes.Shape <|.. shapes.Rectangle
@enduml